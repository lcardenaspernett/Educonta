// Prueba espec√≠fica del bot√≥n de factura

console.log('üßæ PRUEBA ESPEC√çFICA DEL BOT√ìN DE FACTURA');
console.log('=========================================');

// Funci√≥n para probar el bot√≥n de factura
function probarBotonFactura() {
    console.log('üîç Buscando transacciones de ingreso...');
    
    if (!window.DemoData) {
        console.error('‚ùå DemoData no disponible');
        return;
    }
    
    window.DemoData.getTransactions().then(response => {
        console.log(`üìä Total transacciones: ${response.data.length}`);
        
        // Buscar transacciones de ingreso
        const transaccionesIngreso = response.data.filter(t => t.type === 'INCOME');
        console.log(`üí∞ Transacciones de ingreso: ${transaccionesIngreso.length}`);
        
        if (transaccionesIngreso.length === 0) {
            console.error('‚ùå No hay transacciones de ingreso para probar');
            return;
        }
        
        // Probar con la primera transacci√≥n de ingreso
        const transaccion = transaccionesIngreso[0];
        console.log('üéØ Probando con transacci√≥n:', {
            id: transaccion.id,
            description: transaccion.description,
            type: transaccion.type,
            amount: transaccion.amount
        });
        
        // Verificar que la funci√≥n existe
        if (typeof viewTransactionInvoice !== 'function') {
            console.error('‚ùå viewTransactionInvoice no est√° disponible');
            return;
        }
        
        console.log('üöÄ Ejecutando viewTransactionInvoice...');
        try {
            viewTransactionInvoice(transaccion.id);
            console.log('‚úÖ Funci√≥n ejecutada sin errores');
        } catch (error) {
            console.error('‚ùå Error ejecutando funci√≥n:', error);
        }
        
    }).catch(error => {
        console.error('‚ùå Error cargando transacciones:', error);
    });
}

// Funci√≥n para probar con transacci√≥n de gasto (deber√≠a mostrar warning)
function probarBotonFacturaGasto() {
    console.log('üîç Probando bot√≥n de factura con transacci√≥n de gasto...');
    
    if (!window.DemoData) {
        console.error('‚ùå DemoData no disponible');
        return;
    }
    
    window.DemoData.getTransactions().then(response => {
        // Buscar transacciones de gasto
        const transaccionesGasto = response.data.filter(t => t.type === 'EXPENSE');
        console.log(`üí∏ Transacciones de gasto: ${transaccionesGasto.length}`);
        
        if (transaccionesGasto.length === 0) {
            console.error('‚ùå No hay transacciones de gasto para probar');
            return;
        }
        
        // Probar con la primera transacci√≥n de gasto
        const transaccion = transaccionesGasto[0];
        console.log('üéØ Probando con transacci√≥n de gasto:', {
            id: transaccion.id,
            description: transaccion.description,
            type: transaccion.type,
            amount: transaccion.amount
        });
        
        console.log('üöÄ Ejecutando viewTransactionInvoice (deber√≠a mostrar warning)...');
        try {
            viewTransactionInvoice(transaccion.id);
            console.log('‚úÖ Funci√≥n ejecutada - deber√≠a mostrar warning');
        } catch (error) {
            console.error('‚ùå Error ejecutando funci√≥n:', error);
        }
        
    }).catch(error => {
        console.error('‚ùå Error cargando transacciones:', error);
    });
}

// Funci√≥n para verificar si los modales se crean correctamente
function verificarModales() {
    console.log('üîç Verificando modales existentes...');
    
    const modales = [
        'transactionDetailsModal',
        'editTransactionModal', 
        'invoiceViewerModal'
    ];
    
    modales.forEach(modalId => {
        const modal = document.getElementById(modalId);
        if (modal) {
            console.log(`‚úÖ Modal ${modalId} existe`);
            console.log(`   - Visible: ${modal.classList.contains('show')}`);
        } else {
            console.log(`‚ÑπÔ∏è Modal ${modalId} no existe (normal si no se ha abierto)`);
        }
    });
}

// Hacer funciones disponibles globalmente
window.probarBotonFactura = probarBotonFactura;
window.probarBotonFacturaGasto = probarBotonFacturaGasto;
window.verificarModales = verificarModales;

console.log('‚úÖ Funciones de prueba cargadas:');
console.log('   - probarBotonFactura()');
console.log('   - probarBotonFacturaGasto()');
console.log('   - verificarModales()');