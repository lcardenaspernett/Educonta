// ===================================
// RESETEAR BASE DE DATOS DE ESTUDIANTES
// ===================================

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function resetStudentsDatabase() {
    try {
        console.log('üîÑ Reseteando base de datos de estudiantes...');
        
        const institutionId = 'cmdt7n66m00003t1jy17ay313';
        
        // 1. Eliminar todos los estudiantes actuales
        console.log('\nüóëÔ∏è Eliminando estudiantes existentes...');
        const deleteResult = await prisma.student.deleteMany({
            where: { institutionId }
        });
        console.log(`   ‚úÖ ${deleteResult.count} estudiantes eliminados`);
        
        // 2. Crear estudiantes de ejemplo con distribuci√≥n correcta
        console.log('\nüë• Creando nuevos estudiantes con distribuci√≥n correcta...');
        
        // Distribuci√≥n por grado (6¬∞ a 11¬∞) y curso (01, 02, 03)
        const gradeDistribution = {
            '6': { total: 200, courses: ['01', '02'] },    // 6¬∞ Sexto - 2 cursos
            '7': { total: 220, courses: ['01', '02'] },    // 7¬∞ S√©ptimo - 2 cursos  
            '8': { total: 240, courses: ['01', '02', '03'] }, // 8¬∞ Octavo - 3 cursos
            '9': { total: 250, courses: ['01', '02', '03'] }, // 9¬∞ Noveno - 3 cursos
            '10': { total: 220, courses: ['01', '02'] },   // 10¬∞ D√©cimo - 2 cursos
            '11': { total: 210, courses: ['01', '02'] }    // 11¬∞ Und√©cimo - 2 cursos
        };
        
        let totalCreated = 0;
        let studentCounter = 1;
        
        // Nombres y apellidos de ejemplo
        const nombres = [
            'JUAN CARLOS', 'MAR√çA ALEJANDRA', 'CARLOS ANDR√âS', 'ANA SOF√çA', 'LUIS FERNANDO',
            'VALENTINA', 'DIEGO ALEJANDRO', 'CAMILA', 'SEBASTI√ÅN', 'ISABELLA', 'MATEO',
            'SOFIA', 'SANTIAGO', 'VALERIA', 'NICOL√ÅS', 'GABRIELA', 'ALEJANDRO', 'DANIELA',
            'ANDR√âS FELIPE', 'PAULA ANDREA', 'DAVID', 'NATALIA', 'MIGUEL √ÅNGEL', 'CAROLINA',
            'JOS√â LUIS', 'ANDREA', 'KEVIN', 'LAURA', 'BRYAN', 'JESSICA', 'OSCAR', 'PAOLA',
            'CRISTIAN', 'YULIANA', 'JHON', 'TATIANA', 'EDWIN', 'LEIDY', 'ALEXANDER', 'JENNY'
        ];
        
        const apellidos = [
            'GARC√çA L√ìPEZ', 'RODR√çGUEZ MART√çNEZ', 'GONZ√ÅLEZ P√âREZ', 'FERN√ÅNDEZ S√ÅNCHEZ',
            'L√ìPEZ G√ìMEZ', 'MART√çNEZ D√çAZ', 'S√ÅNCHEZ RUIZ', 'P√âREZ HERN√ÅNDEZ',
            'G√ìMEZ JIM√âNEZ', 'MART√çN √ÅLVAREZ', 'JIM√âNEZ MORENO', 'RUIZ MU√ëOZ',
            'HERN√ÅNDEZ ALONSO', 'D√çAZ ROMERO', 'MORENO GUTI√âRREZ', 'MU√ëOZ NAVARRO',
            '√ÅLVAREZ TORRES', 'ROMERO GIL', 'GUTI√âRREZ V√ÅZQUEZ', 'NAVARRO SERRANO',
            'TORRES BLANCO', 'GIL SU√ÅREZ', 'V√ÅZQUEZ CASTRO', 'SERRANO ORTEGA',
            'BLANCO DELGADO', 'SU√ÅREZ ORTIZ', 'CASTRO MAR√çN', 'ORTEGA RUBIO',
            'DELGADO MOLINA', 'ORTIZ MORALES', 'MAR√çN IGLESIAS', 'RUBIO MEDINA'
        ];
        
        for (const [grado, config] of Object.entries(gradeDistribution)) {
            console.log(`\nüìö Creando estudiantes para grado ${grado}¬∞:`);
            
            const studentsPerCourse = Math.floor(config.total / config.courses.length);
            const remainder = config.total % config.courses.length;
            
            for (let courseIndex = 0; courseIndex < config.courses.length; courseIndex++) {
                const curso = config.courses[courseIndex];
                let studentsInThisCourse = studentsPerCourse;
                
                // Distribuir el resto en los primeros cursos
                if (courseIndex < remainder) {
                    studentsInThisCourse++;
                }
                
                console.log(`   üìù Curso ${curso}: ${studentsInThisCourse} estudiantes`);
                
                for (let i = 0; i < studentsInThisCourse; i++) {
                    const nombre = nombres[Math.floor(Math.random() * nombres.length)];
                    const apellido = apellidos[Math.floor(Math.random() * apellidos.length)];
                    const documento = `100${String(studentCounter).padStart(7, '0')}`;
                    
                    await prisma.student.create({
                        data: {
                            documento: documento,
                            nombre: nombre,
                            apellido: apellido,
                            email: `${nombre.toLowerCase().replace(' ', '.')}@villasanpablo.edu.co`,
                            telefono: `+57 30${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,
                            grado: grado,
                            curso: curso,
                            genero: Math.random() > 0.5 ? 'M' : 'F',
                            fechaNacimiento: new Date(2008 - parseInt(grado) + 6, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
                            direccion: `Calle ${Math.floor(Math.random() * 200) + 1} #${Math.floor(Math.random() * 50)}-${Math.floor(Math.random() * 99)}`,
                            acudienteNombre: `Acudiente de ${nombre}`,
                            acudienteTelefono: `+57 31${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,
                            acudienteEmail: `acudiente.${nombre.toLowerCase().replace(' ', '.')}@email.com`,
                            estado: 'activo',
                            institutionId: institutionId
                        }
                    });
                    
                    studentCounter++;
                    totalCreated++;
                }
            }
        }
        
        console.log(`\n‚úÖ Total de estudiantes creados: ${totalCreated}`);
        
        // 3. Verificar la distribuci√≥n final
        console.log('\nüìä Verificando distribuci√≥n final...');
        const finalDistribution = await prisma.student.groupBy({
            by: ['grado', 'curso'],
            where: { institutionId },
            _count: { id: true },
            orderBy: [
                { grado: 'asc' },
                { curso: 'asc' }
            ]
        });
        
        console.log('\nüìà DISTRIBUCI√ìN FINAL:');
        console.log('======================');
        finalDistribution.forEach(item => {
            const gradeNames = {
                '6': 'Sexto',
                '7': 'S√©ptimo',
                '8': 'Octavo', 
                '9': 'Noveno',
                '10': 'D√©cimo',
                '11': 'Und√©cimo'
            };
            console.log(`   ${item.grado}¬∞ (${gradeNames[item.grado]}) - Curso ${item.curso}: ${item._count.id} estudiantes`);
        });
        
        // 4. Regenerar archivo de datos para el frontend
        console.log('\nüîÑ Regenerando archivo de datos para el frontend...');
        
        const studentsFromDB = await prisma.student.findMany({
            where: { institutionId },
            orderBy: [
                { grado: 'asc' },
                { curso: 'asc' },
                { apellido: 'asc' },
                { nombre: 'asc' }
            ]
        });

        // Transformar datos
        const students = studentsFromDB.map(student => ({
            id: student.id,
            firstName: student.nombre || '',
            lastName: student.apellido || '',
            fullName: `${student.nombre || ''} ${student.apellido || ''}`.trim(),
            documentType: 'TI',
            document: student.documento || '',
            email: student.email || `${(student.nombre || '').toLowerCase().replace(' ', '.')}@estudiante.edu.co`,
            phone: student.telefono || '+57 300 000 0000',
            grade: student.grado || '',
            course: student.curso || '',
            status: student.estado === 'activo' ? 'ACTIVE' : 'INACTIVE',
            enrollmentDate: student.createdAt || new Date().toISOString(),
            birthDate: student.fechaNacimiento || new Date('2008-01-01').toISOString(),
            guardian: {
                name: student.acudienteNombre || 'Acudiente',
                phone: student.acudienteTelefono || '+57 300 000 0000',
                email: student.acudienteEmail || 'acudiente@email.com'
            },
            address: student.direccion || 'Direcci√≥n pendiente',
            events: [],
            totalDebt: 0,
            totalPaid: 0,
            createdAt: student.createdAt || new Date().toISOString()
        }));

        // Crear archivo JavaScript actualizado
        const jsContent = `
// Datos de estudiantes generados autom√°ticamente (grados 6¬∞ a 11¬∞, cursos 01-03)
window.STUDENTS_DATA = ${JSON.stringify(students, null, 2)};
console.log('üì¶ Datos de estudiantes cargados (nueva distribuci√≥n):', window.STUDENTS_DATA.length);
`;

        const fs = require('fs');
        const path = require('path');
        const filePath = path.join(__dirname, 'public', 'js', 'students-data.js');
        fs.writeFileSync(filePath, jsContent);
        
        console.log('‚úÖ Archivo de datos actualizado:', filePath);
        
        console.log('\nüéâ ¬°RESET COMPLETADO!');
        console.log('=====================');
        console.log('‚úÖ Base de datos limpiada y recargada');
        console.log('‚úÖ Grados: 6¬∞ a 11¬∞ (Sexto a Und√©cimo)');
        console.log('‚úÖ Cursos: 01, 02, 03 (formato num√©rico)');
        console.log('‚úÖ Distribuci√≥n equilibrada por curso');
        console.log('‚úÖ Archivo de frontend actualizado');
        console.log('\nüí° Recarga la p√°gina de estudiantes para ver los cambios');
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    } finally {
        await prisma.$disconnect();
    }
}

resetStudentsDatabase();