const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');
const prisma = new PrismaClient();

async function resetPassword(email, newPassword) {
    try {
        console.log(`üîÑ Reseteando clave para: ${email}`);
        
        // Verificar que el usuario existe
        const existingUser = await prisma.user.findUnique({
            where: { email: email },
            select: { id: true, email: true, firstName: true, lastName: true, role: true }
        });
        
        if (!existingUser) {
            console.log(`‚ùå Usuario no encontrado: ${email}`);
            return;
        }
        
        // Hashear la nueva contrase√±a
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        
        // Actualizar la contrase√±a
        const updatedUser = await prisma.user.update({
            where: { email: email },
            data: { password: hashedPassword },
            select: { email: true, firstName: true, lastName: true, role: true }
        });
        
        console.log(`‚úÖ Clave actualizada exitosamente!`);
        console.log(`   üìß Email: ${updatedUser.email}`);
        console.log(`   üë§ Usuario: ${updatedUser.firstName} ${updatedUser.lastName}`);
        console.log(`   üé≠ Rol: ${updatedUser.role}`);
        console.log(`   üîë Nueva clave: ${newPassword}`);
        console.log('');
        console.log('üîó Ahora puedes usar estas credenciales para hacer login');
        
    } catch (error) {
        console.error('‚ùå Error reseteando clave:', error.message);
        
        if (error.code === 'P2025') {
            console.log('üí° El usuario especificado no existe en la base de datos');
        }
    } finally {
        await prisma.$disconnect();
    }
}

// Funci√≥n para mostrar ayuda
function showHelp() {
    console.log('üîß SCRIPT DE RESETEO DE CONTRASE√ëAS - EDUCONTA');
    console.log('');
    console.log('üìñ Uso:');
    console.log('   node scripts/reset-password.js <email> <nueva_clave>');
    console.log('');
    console.log('üìù Ejemplos:');
    console.log('   node scripts/reset-password.js rector@colegiosanjose.edu.co "Rector123!"');
    console.log('   node scripts/reset-password.js contabilidad@colegiosanjose.edu.co "Conta123!"');
    console.log('   node scripts/reset-password.js admin@educonta.com "MiClaveSegura2024!"');
    console.log('');
    console.log('‚ö†Ô∏è  Requisitos para la clave:');
    console.log('   - M√≠nimo 8 caracteres');
    console.log('   - Al menos una may√∫scula');
    console.log('   - Al menos una min√∫scula');
    console.log('   - Al menos un n√∫mero');
    console.log('   - Se recomienda usar s√≠mbolos (!@#$%^&*)');
    console.log('');
    console.log('üë• Usuarios disponibles en el sistema:');
    console.log('   - admin@educonta.com (SUPER_ADMIN)');
    console.log('   - rector@colegiosanjose.edu.co (RECTOR)');
    console.log('   - contabilidad@colegiosanjose.edu.co (AUXILIARY_ACCOUNTANT)');
}

// Validar argumentos de l√≠nea de comandos
const email = process.argv[2];
const password = process.argv[3];

if (!email || !password) {
    showHelp();
    process.exit(1);
}

// Validaci√≥n b√°sica de email
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
if (!emailRegex.test(email)) {
    console.log('‚ùå Email inv√°lido. Debe tener formato: usuario@dominio.com');
    process.exit(1);
}

// Validaci√≥n b√°sica de contrase√±a
if (password.length < 8) {
    console.log('‚ùå La contrase√±a debe tener al menos 8 caracteres');
    process.exit(1);
}

// Ejecutar el reseteo
resetPassword(email, password);