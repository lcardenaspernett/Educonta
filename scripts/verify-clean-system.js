// ===================================
// EDUCONTA - Verificar Sistema Limpio
// ===================================

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function verifyCleanSystem(institutionId) {
    console.log('üîç Verificando estado del sistema...\n');
    
    try {
        // Verificar instituci√≥n
        const institution = await prisma.institution.findUnique({
            where: { id: institutionId }
        });
        
        if (!institution) {
            console.log('‚ùå Instituci√≥n no encontrada');
            return;
        }
        
        console.log(`üè´ Instituci√≥n: ${institution.name}`);
        
        // Contar elementos
        const counts = await Promise.all([
            prisma.student.count({ where: { institutionId } }),
            prisma.account.count({ where: { institutionId } }),
            prisma.transaction.count({ where: { institutionId } }),
            prisma.invoice.count({ where: { institutionId } }),
            prisma.event.count({ where: { institutionId } }),
            prisma.eventParticipation.count({ 
                where: { event: { institutionId } } 
            }),
            prisma.category.count({ where: { institutionId } })
        ]);
        
        const [students, accounts, transactions, invoices, events, participations, categories] = counts;
        
        console.log('\nüìä ESTADO ACTUAL DEL SISTEMA:');
        console.log('=====================================');
        console.log(`üë• Estudiantes: ${students}`);
        console.log(`üíº Cuentas: ${accounts}`);
        console.log(`üí∞ Transacciones: ${transactions}`);
        console.log(`üìÑ Facturas: ${invoices}`);
        console.log(`üéâ Eventos: ${events}`);
        console.log(`üë§ Participaciones: ${participations}`);
        console.log(`üìã Categor√≠as: ${categories}`);
        
        // Verificar balance total
        if (transactions > 0) {
            const balanceResult = await prisma.transaction.aggregate({
                where: { 
                    institutionId,
                    status: 'APPROVED'
                },
                _sum: { amount: true }
            });
            
            console.log(`üíµ Balance total: $${(balanceResult._sum.amount || 0).toLocaleString()}`);
        }
        
        console.log('\nüéØ ESTADO DEL SISTEMA:');
        console.log('=====================================');
        
        if (transactions === 0 && invoices === 0 && events === 0) {
            console.log('‚úÖ Sistema limpio - Sin datos de prueba');
            console.log('‚úÖ Listo para datos reales');
            console.log('üí° El modal de configuraci√≥n inicial se mostrar√° autom√°ticamente');
        } else {
            console.log('‚ö†Ô∏è  Sistema contiene datos:');
            if (transactions > 0) console.log(`   - ${transactions} transacciones`);
            if (invoices > 0) console.log(`   - ${invoices} facturas`);
            if (events > 0) console.log(`   - ${events} eventos`);
        }
        
        console.log('\n‚úÖ Verificaci√≥n completada');
        
    } catch (error) {
        console.error('‚ùå Error verificando sistema:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    const institutionId = process.argv[2];
    
    if (!institutionId) {
        console.log('‚ùå Uso: node verify-clean-system.js <institutionId>');
        console.log('üí° Ejemplo: node verify-clean-system.js cmdt7n66m00003t1jy17ay313');
        process.exit(1);
    }
    
    verifyCleanSystem(institutionId);
}

module.exports = { verifyCleanSystem };