#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function loadVillasStudentsProduction() {
  try {
    console.log('üë• CARGANDO ESTUDIANTES VILLAS SAN PABLO - PRODUCCI√ìN');
    console.log('===================================================');
    
    // 1. Buscar la instituci√≥n Villas San Pablo
    const institution = await prisma.institution.findFirst({
      where: {
        OR: [
          { name: { contains: 'Villas', mode: 'insensitive' } },
          { name: { contains: 'San Pablo', mode: 'insensitive' } }
        ]
      }
    });
    
    if (!institution) {
      console.log('‚ùå No se encontr√≥ la instituci√≥n Villas San Pablo');
      return;
    }
    
    console.log(`‚úÖ Instituci√≥n encontrada: ${institution.name}`);
    console.log(`üìã ID: ${institution.id}`);
    
    // 2. Verificar estudiantes existentes
    const existingStudents = await prisma.student.count({
      where: { institutionId: institution.id }
    });
    
    console.log(`üìä Estudiantes existentes: ${existingStudents}`);
    
    // 3. Generar estudiantes realistas para Villas San Pablo
    console.log('üë• Generando estudiantes realistas...');
    
    const grados = [
      'Preescolar', 'Primero', 'Segundo', 'Tercero', 'Cuarto', 'Quinto',
      'Sexto', 'S√©ptimo', 'Octavo', 'Noveno', 'D√©cimo', 'Once'
    ];
    
    const cursos = ['A', 'B', 'C', 'D'];
    
    const nombres = [
      'Ana', 'Carlos', 'Mar√≠a', 'Jos√©', 'Laura', 'David', 'Sofia', 'Miguel',
      'Valentina', 'Alejandro', 'Isabella', 'Santiago', 'Camila', 'Sebasti√°n',
      'Gabriela', 'Andr√©s', 'Natalia', 'Daniel', 'Paula', 'Juan', 'Andrea',
      'Felipe', 'Daniela', 'Nicol√°s', 'Alejandra', 'Mateo', 'Juliana', 'Diego',
      'Mariana', 'Samuel', 'Valeria', 'Tom√°s', 'Luc√≠a', 'Emilio', 'Elena',
      'Ricardo', 'Carmen', 'Fernando', 'Beatriz', 'Antonio', 'Rosa', 'Manuel',
      'Esperanza', 'Francisco', 'Dolores', 'Ram√≥n', 'Pilar', 'Joaqu√≠n', 'Mercedes'
    ];
    
    const apellidos = [
      'Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez',
      'S√°nchez', 'P√©rez', 'G√≥mez', 'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez',
      'D√≠az', 'Moreno', 'Mu√±oz', '√Ålvarez', 'Romero', 'Alonso', 'Guti√©rrez',
      'Navarro', 'Torres', 'Dom√≠nguez', 'V√°zquez', 'Ramos', 'Gil', 'Ram√≠rez',
      'Serrano', 'Blanco', 'Su√°rez', 'Molina', 'Morales', 'Ortega', 'Delgado',
      'Castro', 'Ortiz', 'Rubio', 'Mar√≠n', 'Sanz', 'Iglesias', 'Medina',
      'Garrido', 'Cort√©s', 'Castillo', 'Santos', 'Lozano', 'Guerrero', 'Cano',
      'Prieto', 'M√©ndez', 'Cruz', 'Herrera', 'Pe√±a', 'Flores', 'Cabrera'
    ];
    
    const barrios = [
      'Villas de San Pablo', 'San Pablo Norte', 'San Pablo Sur', 'Villa Nueva',
      'El Recreo', 'La Esperanza', 'Los Almendros', 'Las Flores', 'El Progreso',
      'Villa Hermosa', 'San Jos√©', 'La Paz', 'El Carmen', 'Santa Rosa',
      'Villa Mar√≠a', 'San Antonio', 'La Victoria', 'El Porvenir'
    ];
    
    // 4. Crear estudiantes en lotes
    const batchSize = 100;
    const totalStudents = 1340;
    let createdCount = 0;
    
    console.log(`üöÄ Creando ${totalStudents} estudiantes en lotes de ${batchSize}...`);
    
    for (let batch = 0; batch < Math.ceil(totalStudents / batchSize); batch++) {
      const studentsInBatch = Math.min(batchSize, totalStudents - (batch * batchSize));
      const studentsData = [];
      
      for (let i = 0; i < studentsInBatch; i++) {
        const studentNumber = (batch * batchSize) + i + 1;
        const nombre = nombres[Math.floor(Math.random() * nombres.length)];
        const apellido1 = apellidos[Math.floor(Math.random() * apellidos.length)];
        const apellido2 = apellidos[Math.floor(Math.random() * apellidos.length)];
        const grado = grados[Math.floor(Math.random() * grados.length)];
        const curso = cursos[Math.floor(Math.random() * cursos.length)];
        const barrio = barrios[Math.floor(Math.random() * barrios.length)];
        
        // Generar documento √∫nico
        const documento = `10${String(studentNumber).padStart(8, '0')}`;
        
        // Generar fecha de nacimiento realista
        const currentYear = new Date().getFullYear();
        const birthYear = currentYear - Math.floor(Math.random() * 12) - 6; // Entre 6 y 18 a√±os
        const birthMonth = Math.floor(Math.random() * 12) + 1;
        const birthDay = Math.floor(Math.random() * 28) + 1;
        const fechaNacimiento = new Date(birthYear, birthMonth - 1, birthDay);
        
        studentsData.push({
          documento,
          nombre,
          apellido: `${apellido1} ${apellido2}`,
          email: `${nombre.toLowerCase()}.${apellido1.toLowerCase()}${studentNumber}@estudiante.villasanpablo.edu.co`,
          telefono: `300${String(Math.floor(Math.random() * 9000000) + 1000000)}`,
          grado,
          curso,
          genero: Math.random() > 0.5 ? 'M' : 'F',
          fechaNacimiento,
          direccion: `Calle ${Math.floor(Math.random() * 100) + 1} #${Math.floor(Math.random() * 50) + 1}-${Math.floor(Math.random() * 99) + 1}, ${barrio}`,
          acudienteNombre: `${nombres[Math.floor(Math.random() * nombres.length)]} ${apellidos[Math.floor(Math.random() * apellidos.length)]}`,
          acudienteTelefono: `300${String(Math.floor(Math.random() * 9000000) + 1000000)}`,
          acudienteEmail: `acudiente${studentNumber}@gmail.com`,
          estado: 'activo',
          institutionId: institution.id
        });
      }
      
      // Insertar lote
      try {
        await prisma.student.createMany({
          data: studentsData,
          skipDuplicates: true
        });
        
        createdCount += studentsInBatch;
        console.log(`‚úÖ Lote ${batch + 1}: ${studentsInBatch} estudiantes creados (Total: ${createdCount}/${totalStudents})`);
        
        // Peque√±a pausa para no sobrecargar la base de datos
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.log(`‚ö†Ô∏è Error en lote ${batch + 1}:`, error.message);
      }
    }
    
    // 5. Verificar resultado final
    const finalCount = await prisma.student.count({
      where: { institutionId: institution.id }
    });
    
    console.log('\nüìä RESUMEN FINAL:');
    console.log('================');
    console.log(`üè´ Instituci√≥n: ${institution.name}`);
    console.log(`üë• Estudiantes creados: ${createdCount}`);
    console.log(`üìã Total en base de datos: ${finalCount}`);
    console.log(`‚úÖ Estado: ${finalCount >= 1000 ? 'EXITOSO' : 'PARCIAL'}`);
    
    // 6. Mostrar estad√≠sticas por grado
    console.log('\nüìà ESTAD√çSTICAS POR GRADO:');
    console.log('==========================');
    
    for (const grado of grados) {
      const count = await prisma.student.count({
        where: {
          institutionId: institution.id,
          grado: grado
        }
      });
      console.log(`${grado}: ${count} estudiantes`);
    }
    
    console.log('\nüéâ CARGA DE ESTUDIANTES COMPLETADA');
    
  } catch (error) {
    console.error('‚ùå Error cargando estudiantes:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  loadVillasStudentsProduction()
    .then(() => {
      console.log('‚úÖ Script completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Error:', error);
      process.exit(1);
    });
}

module.exports = { loadVillasStudentsProduction };