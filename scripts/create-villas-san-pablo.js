// ===================================
// SCRIPT PARA CREAR INSTITUCI√ìN VILLAS DE SAN PABLO
// ===================================

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function createVillasSanPablo() {
    console.log('üè´ Creando Instituci√≥n Educativa Distrital Villas de San Pablo...');

    try {
        // 1. Verificar si la instituci√≥n ya existe
        console.log('üîç Verificando si la instituci√≥n ya existe...');
        let institution = await prisma.institution.findUnique({
            where: { nit: '901079125-0' }
        });

        if (institution) {
            console.log('‚úÖ Instituci√≥n ya existe:', institution.name);
        } else {
            // Crear la instituci√≥n con datos oficiales
            console.log('üìù Creando instituci√≥n con datos oficiales...');
            institution = await prisma.institution.create({
                data: {
                    name: 'Instituci√≥n Educativa Distrital Villas de San Pablo',
                    nit: '901079125-0',
                    address: 'Diagonal 136 N¬∫ 9D-60, Barrio Villas de San Pablo',
                    city: 'Barranquilla',
                    department: 'Atl√°ntico',
                    country: 'Colombia',
                    phone: '313 537 40 16',
                    email: 'yasminricodc@gmail.com',
                    educationLevel: 'MIXTA', // Preescolar, B√°sica Primaria, B√°sica Secundaria y Media
                    isActive: true
                }
            });
            console.log('‚úÖ Instituci√≥n creada:', institution.name);
        }

        // 2. Verificar y crear usuario rector
        console.log('üë®‚Äçüíº Verificando usuario rector...');
        let rector = await prisma.user.findUnique({
            where: { email: 'rector@villasanpablo.edu.co' }
        });

        if (rector) {
            console.log('‚úÖ Usuario rector ya existe:', rector.email);
        } else {
            const rectorPassword = await bcrypt.hash('VillasSP2024!', 10);
            
            rector = await prisma.user.create({
                data: {
                    email: 'rector@villasanpablo.edu.co',
                    password: rectorPassword,
                    firstName: 'Yasmin',
                    lastName: 'Rico',
                    role: 'RECTOR',
                    institutionId: institution.id,
                    isActive: true
                }
            });
            console.log('‚úÖ Usuario rector creado:', rector.email);
        }

        // 3. Verificar y crear usuario contabilidad
        console.log('üí∞ Verificando usuario contabilidad...');
        let contabilidad = await prisma.user.findUnique({
            where: { email: 'contabilidad@villasanpablo.edu.co' }
        });

        if (contabilidad) {
            console.log('‚úÖ Usuario contabilidad ya existe:', contabilidad.email);
        } else {
            const contabilidadPassword = await bcrypt.hash('ContaVSP2024!', 10);
            
            contabilidad = await prisma.user.create({
                data: {
                    email: 'contabilidad@villasanpablo.edu.co',
                    password: contabilidadPassword,
                    firstName: 'Auxiliar',
                    lastName: 'Contable',
                    role: 'AUXILIARY_ACCOUNTANT',
                    institutionId: institution.id,
                    isActive: true
                }
            });
            console.log('‚úÖ Usuario contabilidad creado:', contabilidad.email);
        }

        console.log('‚úÖ Usuarios creados correctamente');

        // 4. Crear algunos eventos de ejemplo
        console.log('üéâ Creando eventos de ejemplo...');
        
        const sampleEvents = [
            {
                nombre: 'Rifa Navide√±a 2024',
                tipo: 'raffle',
                descripcion: 'Rifa navide√±a para recaudar fondos para mejoras de la instituci√≥n',
                fechaInicio: new Date('2024-12-01'),
                fechaFin: new Date('2024-12-24'),
                metaRecaudacion: 5000000,
                estado: 'active',
                precioBoletaRifa: 10000,
                maxBoletasRifa: 500
            },
            {
                nombre: 'Derecho a Grado 2024-2',
                tipo: 'graduation',
                descripcion: 'Cobro de derechos de grado para estudiantes de grado 11¬∞',
                fechaInicio: new Date('2024-11-01'),
                fechaFin: new Date('2024-11-30'),
                metaRecaudacion: 15000000,
                estado: 'planning',
                valorDerecho: 200000
            },
            {
                nombre: 'Bingo Familiar Marzo',
                tipo: 'bingo',
                descripcion: 'Bingo familiar para recaudar fondos para actividades estudiantiles',
                fechaInicio: new Date('2025-03-15'),
                fechaFin: new Date('2025-03-15'),
                metaRecaudacion: 2000000,
                estado: 'planning',
                precioCartonBingo: 5000,
                maxCartonesBingo: 400
            }
        ];

        for (const eventData of sampleEvents) {
            await prisma.event.create({
                data: {
                    ...eventData,
                    institutionId: institution.id,
                    montoRecaudado: 0
                }
            });
        }

        console.log('‚úÖ Eventos de ejemplo creados');

        // 5. Mostrar resumen
        console.log('\nüéâ ¬°INSTITUCI√ìN CREADA EXITOSAMENTE!');
        console.log('=====================================');
        console.log(`üè´ Instituci√≥n: ${institution.name}`);
        console.log(`üìß Email institucional: ${institution.email}`);
        console.log(`üÜî ID de instituci√≥n: ${institution.id}`);
        console.log('\nüë• USUARIOS CREADOS:');
        console.log('=====================================');
        console.log(`üë®‚Äçüíº Rector:`);
        console.log(`   üìß Email: ${rector.email}`);
        console.log(`   üîë Contrase√±a: VillasSP2024!`);
        console.log(`   üë§ Nombre: ${rector.firstName} ${rector.lastName}`);
        console.log(`\nüí∞ Contabilidad:`);
        console.log(`   üìß Email: ${contabilidad.email}`);
        console.log(`   üîë Contrase√±a: ContaVSP2024!`);
        console.log(`   üë§ Nombre: ${contabilidad.firstName} ${contabilidad.lastName}`);
        
        console.log('\nüìä INFORMACI√ìN INSTITUCIONAL:');
        console.log('=====================================');
        console.log(`üè´ NIT: 901.079.125-0`);
        console.log(`üìç Direcci√≥n: Diagonal 136 N¬∫ 9D-60`);
        console.log(`üèòÔ∏è Barrio: Villas de San Pablo`);
        console.log(`üåç Localidad: Occidental`);
        console.log(`üìû Tel√©fono: 313 537 40 16`);
        console.log(`üèõÔ∏è C√≥digo DANE: 108001800065`);
        console.log(`üìú Resoluci√≥n: 06584 de 23 junio de 2017`);
        console.log(`üìö Niveles: Preescolar, B√°sica Primaria, B√°sica Secundaria y Media`);
        console.log(`üéì T√≠tulo: Bachiller Acad√©mico`);
        console.log(`üìÖ Calendario: A - Jornada: √önica`);
        console.log(`üéâ Eventos de ejemplo: 3 eventos creados`);
        
        console.log('\nüîó ENLACES DE ACCESO:');
        console.log('=====================================');
        console.log(`üåê Login: http://localhost:3000/login.html`);
        console.log(`üè´ Dashboard Rector: http://localhost:3000/rector-dashboard.html?institutionId=${institution.id}`);
        console.log(`üí∞ Dashboard Contable: http://localhost:3000/accounting-dashboard.html?institutionId=${institution.id}`);
        console.log(`üéâ Gesti√≥n Eventos: http://localhost:3000/events-management.html?institutionId=${institution.id}`);
        console.log(`üë• Gesti√≥n Estudiantes: http://localhost:3000/students-management.html?institutionId=${institution.id}`);

        return {
            institution,
            rector,
            contabilidad
        };

    } catch (error) {
        console.error('‚ùå Error creando instituci√≥n:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    createVillasSanPablo()
        .then(() => {
            console.log('\n‚úÖ Proceso completado exitosamente');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Error en el proceso:', error);
            process.exit(1);
        });
}

module.exports = { createVillasSanPablo };