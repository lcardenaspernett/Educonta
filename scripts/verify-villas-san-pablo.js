// ===================================
// SCRIPT DE VERIFICACI√ìN - VILLAS DE SAN PABLO
// ===================================

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function verifyVillasSanPablo() {
    console.log('üîç Verificando configuraci√≥n de Villas de San Pablo...\n');

    try {
        // 1. Verificar instituci√≥n
        console.log('üè´ Verificando instituci√≥n...');
        const institution = await prisma.institution.findUnique({
            where: { nit: '901079125-0' },
            include: {
                users: true,
                students: true,
                events: true
            }
        });

        if (!institution) {
            console.log('‚ùå Instituci√≥n no encontrada');
            return false;
        }

        console.log('‚úÖ Instituci√≥n encontrada:');
        console.log(`   üìõ Nombre: ${institution.name}`);
        console.log(`   üÜî ID: ${institution.id}`);
        console.log(`   üìß Email: ${institution.email}`);
        console.log(`   üìû Tel√©fono: ${institution.phone}`);
        console.log(`   üìç Direcci√≥n: ${institution.address}`);

        // 2. Verificar usuarios
        console.log('\nüë• Verificando usuarios...');
        const rector = institution.users.find(u => u.role === 'RECTOR');
        const contabilidad = institution.users.find(u => u.role === 'AUXILIARY_ACCOUNTANT');

        if (rector) {
            console.log('‚úÖ Usuario Rector encontrado:');
            console.log(`   üìß Email: ${rector.email}`);
            console.log(`   üë§ Nombre: ${rector.firstName} ${rector.lastName}`);
            console.log(`   üîë Contrase√±a: VillasSP2024!`);
        } else {
            console.log('‚ùå Usuario Rector no encontrado');
        }

        if (contabilidad) {
            console.log('‚úÖ Usuario Contabilidad encontrado:');
            console.log(`   üìß Email: ${contabilidad.email}`);
            console.log(`   üë§ Nombre: ${contabilidad.firstName} ${contabilidad.lastName}`);
            console.log(`   üîë Contrase√±a: ContaVSP2024!`);
        } else {
            console.log('‚ùå Usuario Contabilidad no encontrado');
        }

        // 3. Verificar eventos
        console.log('\nüéâ Verificando eventos...');
        console.log(`‚úÖ Eventos encontrados: ${institution.events.length}`);
        institution.events.forEach(event => {
            console.log(`   üìÖ ${event.nombre} (${event.tipo}) - ${event.estado}`);
        });

        // 4. Verificar estudiantes
        console.log('\nüë• Verificando estudiantes...');
        console.log(`‚úÖ Estudiantes encontrados: ${institution.students.length}`);
        
        if (institution.students.length > 0) {
            // Estad√≠sticas por grado
            const gradeStats = await prisma.student.groupBy({
                by: ['grado'],
                where: { institutionId: institution.id },
                _count: { id: true }
            });

            console.log('üìä Estudiantes por grado:');
            gradeStats.forEach(stat => {
                console.log(`   ${stat.grado}¬∞: ${stat._count.id} estudiantes`);
            });
        } else {
            console.log('‚ö†Ô∏è  No hay estudiantes cargados a√∫n');
            console.log('üí° Usa el script load-students-excel.js para cargar estudiantes');
        }

        // 5. Generar enlaces de acceso
        console.log('\nüîó ENLACES DE ACCESO:');
        console.log('=====================================');
        console.log(`üåê Login: http://localhost:3000/login.html`);
        console.log(`üè´ Dashboard Rector: http://localhost:3000/rector-dashboard.html?institutionId=${institution.id}`);
        console.log(`üí∞ Dashboard Contable: http://localhost:3000/accounting-dashboard.html?institutionId=${institution.id}`);
        console.log(`üéâ Gesti√≥n Eventos: http://localhost:3000/events-management.html?institutionId=${institution.id}`);
        console.log(`üë• Gesti√≥n Estudiantes: http://localhost:3000/students-management.html?institutionId=${institution.id}`);

        // 6. Verificar conectividad de login
        console.log('\nüîê Verificando credenciales...');
        
        // Verificar contrase√±a del rector
        const rectorPasswordValid = await bcrypt.compare('VillasSP2024!', rector.password);
        console.log(`‚úÖ Contrase√±a Rector: ${rectorPasswordValid ? 'V√°lida' : 'Inv√°lida'}`);
        
        // Verificar contrase√±a de contabilidad
        const contabilidadPasswordValid = await bcrypt.compare('ContaVSP2024!', contabilidad.password);
        console.log(`‚úÖ Contrase√±a Contabilidad: ${contabilidadPasswordValid ? 'V√°lida' : 'Inv√°lida'}`);

        // 7. Instrucciones finales
        console.log('\nüìã PR√ìXIMOS PASOS:');
        console.log('=====================================');
        console.log('1. üöÄ Inicia el servidor: npm start');
        console.log('2. üåê Ve a: http://localhost:3000/login.html');
        console.log('3. üîë Usa las credenciales mostradas arriba');
        console.log('4. üìä Carga estudiantes con: node scripts/load-students-excel.js archivo.xlsx ' + institution.id);
        console.log('5. üéâ ¬°Disfruta del sistema!');

        return true;

    } catch (error) {
        console.error('‚ùå Error verificando configuraci√≥n:', error);
        return false;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    verifyVillasSanPablo()
        .then((success) => {
            if (success) {
                console.log('\n‚úÖ Verificaci√≥n completada exitosamente');
            } else {
                console.log('\n‚ùå Verificaci√≥n fall√≥');
            }
            process.exit(success ? 0 : 1);
        })
        .catch((error) => {
            console.error('‚ùå Error en la verificaci√≥n:', error);
            process.exit(1);
        });
}

module.exports = { verifyVillasSanPablo };